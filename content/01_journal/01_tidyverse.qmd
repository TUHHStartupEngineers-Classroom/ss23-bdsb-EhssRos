---
title: "01 Intro to the tidyverse"
author: "Ehssan Roshankar"
date: "2023-04-25"
output:
  html_document:
    toc: true
    toc_float: true
    df_print: paged
    collapsed: false
    number_sections: true
    toc_depth: 3
    code_folding: hide
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(message=FALSE,warning=FALSE, cache=TRUE)
```



# Challenge1: Intro to the tidyverse

## Preparation
### include libraries

```{r}
library(tidyverse)
library(readxl)
library(lubridate)
```


### Loading data

```{r}
bikes_tbl      <- read_excel( "C:/Users/ehsan/Desktop/DataSciece/myds/ss23-bdsb-EhssRos/01_tidyverse/ds_data/01_bike_sales/01_raw_data/bikes.xlsx")
orderlines_tbl <- read_excel("C:/Users/ehsan/Desktop/DataSciece/myds/ss23-bdsb-EhssRos/01_tidyverse/ds_data/01_bike_sales/01_raw_data/orderlines.xlsx")
bikeshops_tbl  <- read_excel("C:/Users/ehsan/Desktop/DataSciece/myds/ss23-bdsb-EhssRos/01_tidyverse/ds_data/01_bike_sales/01_raw_data/bikeshops.xlsx")
```


### Joining Data
```{r}
bike_orderlines_joined_tbl <- orderlines_tbl %>%
  left_join(bikes_tbl, by = c("product.id" = "bike.id")) %>%
  left_join(bikeshops_tbl, by = c("customer.id" = "bikeshop.id"))
```

### Wrangling Data
```{r}

bike_orderlines_wrangled_tbl <- bike_orderlines_joined_tbl %>%
  # 5.1 Separate category name
  separate(col    = category,
           into   = c("category.1", "category.2", "category.3"),
           sep    = " - ") %>%
  
  # separate location: city, state
  separate(col    = location,
           into   = c("city", "state"),
           sep    = ", ") %>%
  
  # 5.2 Add the total price (price * quantity) 
  # Add a column to a tibble that uses a formula-style calculation of other columns
  mutate(total.price = price * quantity) %>%
  
  select(-...1, -gender, -url) %>%
  
  # 5.3.2 by a pattern
  # You can use the select_helpers to define patterns. 
  # Type ?ends_with and click on Select helpers in the documentation
  select(-ends_with(".id")) %>%
  
  # 5.3.3 Actually we need the column "order.id". Let's bind it back to the data
  bind_cols(bike_orderlines_joined_tbl %>% select(order.id)) %>% 
  
  # 5.3.4 You can reorder the data by selecting the columns in your desired order.
  # You can use select_helpers like contains() or everything()
  select(order.id, contains("order"), contains("model"), contains("category"),
         price, quantity, total.price,
         everything()) %>%
  
  # 5.4 Rename columns because we actually wanted underscores instead of the dots
  # (one at the time vs. multiple at once)
  rename(bikeshop = name) %>%
  set_names(names(.) %>% str_replace_all("\\.", "_"))

```

## Business Insights
### Sales by Location

#### Step 1: Manipulation
```{r}
sales_by_loc_tbl <- bike_orderlines_wrangled_tbl %>%

  select(state, total_price) %>%
  
  group_by(state) %>% 
  summarize(sales = sum(total_price))%>%
  
  mutate(sales_text = scales::dollar(sales, big.mark = ".", 
                                     decimal.mark = ",", 
                                     prefix = "", 
                                     suffix = " €"))
```

#### Step 2: Visualization
```{r, plot, fig.width=11, fig.height=8, fig.cap = "Sales by state"}
sales_by_loc_tbl %>%
  
  ggplot(aes(x = state, y = sales)) +
  
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  geom_col(fill = "#2DC6D6") + # Use geom_col for a bar plot
  geom_label(aes(label = sales_text)) + # Adding labels to the bars
  scale_y_continuous(labels = scales::dollar_format(big.mark = ".", 
                                                    decimal.mark = ",", 
                                                    prefix = "", 
                                                    suffix = " €")) +
  labs(
    title    = "Sales rev by state",
    subtitle = "year 15-19",
    x = "", 
    y = "Revenue"
  )
#NRW Best
```

### Sales by location and year

#### Step 1: Manipulation
```{r}
sales_by_year_loc_tbl <- bike_orderlines_wrangled_tbl %>%
  select(order_date, total_price, state) %>%
  mutate(year = year(order_date)) %>%
  group_by(year, state) %>%
  summarise(sales = sum(total_price)) %>%
  ungroup() %>%
  mutate(sales_text = scales::dollar(sales, big.mark = ".", 
                                     decimal.mark = ",", 
                                     prefix = "", 
                                     suffix = " €"))
```

#### Step 2: Visualization
```{r, plot2, fig.width=11, fig.height=8, fig.cap = "Sales by state and year"}
sales_by_year_loc_tbl %>%

  ggplot(aes(x = year, y = sales, fill = state))+

  geom_col() + # Run up to here to get a stacked bar plot
  geom_smooth(method = "lm", se = FALSE) + # Adding a trendline
 
  facet_wrap(~ state)+

  scale_y_continuous(labels = scales::dollar_format(big.mark = ".", 
                                                    decimal.mark = ",", 
                                                    prefix = "", 
                                                    suffix = " €")) +
  labs(
    title = "Revenue by state and year",
    subtitle = "",
    fill = "states"
  )
#NRW Best
```