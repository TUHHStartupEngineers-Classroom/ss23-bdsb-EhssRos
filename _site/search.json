[
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "01 Intro to the tidyverse",
    "section": "",
    "text": "library(tidyverse)\nlibrary(readxl)\nlibrary(lubridate)\n\n\n\nbikes_tbl      &lt;- read_excel( \"C:/Users/ehsan/Desktop/DataSciece/myds/ss23-bdsb-EhssRos/01_tidyverse/ds_data/01_bike_sales/01_raw_data/bikes.xlsx\")\norderlines_tbl &lt;- read_excel(\"C:/Users/ehsan/Desktop/DataSciece/myds/ss23-bdsb-EhssRos/01_tidyverse/ds_data/01_bike_sales/01_raw_data/orderlines.xlsx\")\n\n#&gt; New names:\n#&gt; • `` -&gt; `...1`\n\nbikeshops_tbl  &lt;- read_excel(\"C:/Users/ehsan/Desktop/DataSciece/myds/ss23-bdsb-EhssRos/01_tidyverse/ds_data/01_bike_sales/01_raw_data/bikeshops.xlsx\")\n\n\n\nbike_orderlines_joined_tbl &lt;- orderlines_tbl %&gt;%\n  left_join(bikes_tbl, by = c(\"product.id\" = \"bike.id\")) %&gt;%\n  left_join(bikeshops_tbl, by = c(\"customer.id\" = \"bikeshop.id\"))\n\n\n\nbike_orderlines_wrangled_tbl &lt;- bike_orderlines_joined_tbl %&gt;%\n  # 5.1 Separate category name\n  separate(col    = category,\n           into   = c(\"category.1\", \"category.2\", \"category.3\"),\n           sep    = \" - \") %&gt;%\n  \n  # separate location: city, state\n  separate(col    = location,\n           into   = c(\"city\", \"state\"),\n           sep    = \", \") %&gt;%\n  \n  # 5.2 Add the total price (price * quantity) \n  # Add a column to a tibble that uses a formula-style calculation of other columns\n  mutate(total.price = price * quantity) %&gt;%\n  \n  select(-...1, -gender, -url) %&gt;%\n  \n  # 5.3.2 by a pattern\n  # You can use the select_helpers to define patterns. \n  # Type ?ends_with and click on Select helpers in the documentation\n  select(-ends_with(\".id\")) %&gt;%\n  \n  # 5.3.3 Actually we need the column \"order.id\". Let's bind it back to the data\n  bind_cols(bike_orderlines_joined_tbl %&gt;% select(order.id)) %&gt;% \n  \n  # 5.3.4 You can reorder the data by selecting the columns in your desired order.\n  # You can use select_helpers like contains() or everything()\n  select(order.id, contains(\"order\"), contains(\"model\"), contains(\"category\"),\n         price, quantity, total.price,\n         everything()) %&gt;%\n  \n  # 5.4 Rename columns because we actually wanted underscores instead of the dots\n  # (one at the time vs. multiple at once)\n  rename(bikeshop = name) %&gt;%\n  set_names(names(.) %&gt;% str_replace_all(\"\\\\.\", \"_\"))\n\n\n\nsales_by_loc_tbl &lt;- bike_orderlines_wrangled_tbl %&gt;%\n\n  select(state, total_price) %&gt;%\n  \n  group_by(state) %&gt;% \n  summarize(sales = sum(total_price))%&gt;%\n  \n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\n\n\nsales_by_loc_tbl %&gt;%\n  \n  ggplot(aes(x = state, y = sales)) +\n  \n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  geom_col(fill = \"#2DC6D6\") + # Use geom_col for a bar plot\n  geom_label(aes(label = sales_text)) + # Adding labels to the bars\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  labs(\n    title    = \"Sales rev by state\",\n    subtitle = \"year 15-19\",\n    x = \"\", \n    y = \"Revenue\"\n  )\n\n\n\nSales by state\n\n\n#NRW Best\n\n\n\n\nsales_by_year_loc_tbl &lt;- bike_orderlines_wrangled_tbl %&gt;%\n  select(order_date, total_price, state) %&gt;%\n  mutate(year = year(order_date)) %&gt;%\n  group_by(year, state) %&gt;%\n  summarise(sales = sum(total_price)) %&gt;%\n  ungroup() %&gt;%\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\n#&gt; `summarise()` has grouped output by 'year'. You can override using the\n#&gt; `.groups` argument.\n\n\n\n\nsales_by_year_loc_tbl %&gt;%\n\n  ggplot(aes(x = year, y = sales, fill = state))+\n\n  geom_col() + # Run up to here to get a stacked bar plot\n  geom_smooth(method = \"lm\", se = FALSE) + # Adding a trendline\n \n  facet_wrap(~ state)+\n\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  labs(\n    title = \"Revenue by state and year\",\n    subtitle = \"\",\n    fill = \"states\"\n  )\n\n#&gt; `geom_smooth()` using formula = 'y ~ x'\n\n\n\n\nSales by state and year\n\n\n#NRW Best"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#preparation",
    "href": "content/01_journal/01_tidyverse.html#preparation",
    "title": "01 Intro to the tidyverse",
    "section": "",
    "text": "library(tidyverse)\nlibrary(readxl)\nlibrary(lubridate)\n\n\n\nbikes_tbl      &lt;- read_excel( \"C:/Users/ehsan/Desktop/DataSciece/myds/ss23-bdsb-EhssRos/01_tidyverse/ds_data/01_bike_sales/01_raw_data/bikes.xlsx\")\norderlines_tbl &lt;- read_excel(\"C:/Users/ehsan/Desktop/DataSciece/myds/ss23-bdsb-EhssRos/01_tidyverse/ds_data/01_bike_sales/01_raw_data/orderlines.xlsx\")\n\n#&gt; New names:\n#&gt; • `` -&gt; `...1`\n\nbikeshops_tbl  &lt;- read_excel(\"C:/Users/ehsan/Desktop/DataSciece/myds/ss23-bdsb-EhssRos/01_tidyverse/ds_data/01_bike_sales/01_raw_data/bikeshops.xlsx\")\n\n\n\nbike_orderlines_joined_tbl &lt;- orderlines_tbl %&gt;%\n  left_join(bikes_tbl, by = c(\"product.id\" = \"bike.id\")) %&gt;%\n  left_join(bikeshops_tbl, by = c(\"customer.id\" = \"bikeshop.id\"))\n\n\n\nbike_orderlines_wrangled_tbl &lt;- bike_orderlines_joined_tbl %&gt;%\n  # 5.1 Separate category name\n  separate(col    = category,\n           into   = c(\"category.1\", \"category.2\", \"category.3\"),\n           sep    = \" - \") %&gt;%\n  \n  # separate location: city, state\n  separate(col    = location,\n           into   = c(\"city\", \"state\"),\n           sep    = \", \") %&gt;%\n  \n  # 5.2 Add the total price (price * quantity) \n  # Add a column to a tibble that uses a formula-style calculation of other columns\n  mutate(total.price = price * quantity) %&gt;%\n  \n  select(-...1, -gender, -url) %&gt;%\n  \n  # 5.3.2 by a pattern\n  # You can use the select_helpers to define patterns. \n  # Type ?ends_with and click on Select helpers in the documentation\n  select(-ends_with(\".id\")) %&gt;%\n  \n  # 5.3.3 Actually we need the column \"order.id\". Let's bind it back to the data\n  bind_cols(bike_orderlines_joined_tbl %&gt;% select(order.id)) %&gt;% \n  \n  # 5.3.4 You can reorder the data by selecting the columns in your desired order.\n  # You can use select_helpers like contains() or everything()\n  select(order.id, contains(\"order\"), contains(\"model\"), contains(\"category\"),\n         price, quantity, total.price,\n         everything()) %&gt;%\n  \n  # 5.4 Rename columns because we actually wanted underscores instead of the dots\n  # (one at the time vs. multiple at once)\n  rename(bikeshop = name) %&gt;%\n  set_names(names(.) %&gt;% str_replace_all(\"\\\\.\", \"_\"))\n\n\n\nsales_by_loc_tbl &lt;- bike_orderlines_wrangled_tbl %&gt;%\n\n  select(state, total_price) %&gt;%\n  \n  group_by(state) %&gt;% \n  summarize(sales = sum(total_price))%&gt;%\n  \n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\n\n\nsales_by_loc_tbl %&gt;%\n  \n  ggplot(aes(x = state, y = sales)) +\n  \n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  geom_col(fill = \"#2DC6D6\") + # Use geom_col for a bar plot\n  geom_label(aes(label = sales_text)) + # Adding labels to the bars\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  labs(\n    title    = \"Sales rev by state\",\n    subtitle = \"year 15-19\",\n    x = \"\", \n    y = \"Revenue\"\n  )\n\n\n\nSales by state\n\n\n#NRW Best\n\n\n\n\nsales_by_year_loc_tbl &lt;- bike_orderlines_wrangled_tbl %&gt;%\n  select(order_date, total_price, state) %&gt;%\n  mutate(year = year(order_date)) %&gt;%\n  group_by(year, state) %&gt;%\n  summarise(sales = sum(total_price)) %&gt;%\n  ungroup() %&gt;%\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\n#&gt; `summarise()` has grouped output by 'year'. You can override using the\n#&gt; `.groups` argument.\n\n\n\n\nsales_by_year_loc_tbl %&gt;%\n\n  ggplot(aes(x = year, y = sales, fill = state))+\n\n  geom_col() + # Run up to here to get a stacked bar plot\n  geom_smooth(method = \"lm\", se = FALSE) + # Adding a trendline\n \n  facet_wrap(~ state)+\n\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  labs(\n    title = \"Revenue by state and year\",\n    subtitle = \"\",\n    fill = \"states\"\n  )\n\n#&gt; `geom_smooth()` using formula = 'y ~ x'\n\n\n\n\nSales by state and year\n\n\n#NRW Best"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "library(tidyverse) \nlibrary(rvest)     \nlibrary(xopen)     \nlibrary(jsonlite)  \nlibrary(glue)      # concatenate strings\nlibrary(stringi)   # character string/text processing\nlibrary(httr)\n\n\nget_weather_data &lt;- function(location) {\n  # Construct URL for API request\n  url &lt;- glue(\"https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/{location}\",\n              \"?unitGroup=metric&key=RA4VC64DQX39GT95QYTHY545B&contentType=json\")\n  json_data &lt;- fromJSON(content(GET(url), \"text\"), flatten = TRUE)\n  daily_data &lt;- json_data$days\n  # Extract only datetime, tempmax, tempmin, and temp columns\n  extracted_data &lt;- daily_data[, c(\"datetime\", \"tempmax\", \"tempmin\", \"temp\")]\n  colnames(extracted_data) &lt;- c(\"Datum\", \"Max. Temperatur\", \"Min. Temperatur\", \"Temperatur\")\n  cat(paste0(\"Wetter \", location, \" die nächsten 15 Tage:\\n\\n\"))\n  print(as_tibble(extracted_data))\n}\n\n\nweather_data &lt;- get_weather_data(\"Hamburg\")\n\n#&gt; No encoding supplied: defaulting to UTF-8.\n\n\n#&gt; Wetter Hamburg die nächsten 15 Tage:\n#&gt; \n#&gt; # A tibble: 15 × 4\n#&gt;    Datum      `Max. Temperatur` `Min. Temperatur` Temperatur\n#&gt;    &lt;chr&gt;                  &lt;dbl&gt;             &lt;dbl&gt;      &lt;dbl&gt;\n#&gt;  1 2023-05-01              18.6               4.3       11.4\n#&gt;  2 2023-05-02              12.1               6.6        9.5\n#&gt;  3 2023-05-03              13                 4.4        8.9\n#&gt;  4 2023-05-04              14                 4.8        9.8\n#&gt;  5 2023-05-05               9.2               6.6        8.1\n#&gt;  6 2023-05-06              14.2               3.7        8.7\n#&gt;  7 2023-05-07              14.8               3.1        8.8\n#&gt;  8 2023-05-08              15.2               2.3        9  \n#&gt;  9 2023-05-09              15.2               2.1        9.2\n#&gt; 10 2023-05-10              14                 6.8        9.7\n#&gt; 11 2023-05-11              14.6               3.1        8.8\n#&gt; 12 2023-05-12              15.4               2.1        8.7\n#&gt; 13 2023-05-13              14.1               4.2        9.6\n#&gt; 14 2023-05-14              10.4               5.3        7.8\n#&gt; 15 2023-05-15              14.5               5.6        9.7\n\n\n\nscrape_bikes &lt;- function(url) {\n  page &lt;- read_html(url)\n  bikes &lt;- page %&gt;% html_nodes('.catalog-category-bikes__content')\n  model_prices &lt;- data.frame(model = character(), price = numeric())\n  for (bike in bikes) {\n    model &lt;- bike %&gt;% \n      html_node('.basic-headline__title') %&gt;% \n      html_text(trim = TRUE)\n    price &lt;- bike %&gt;% \n      html_node('.catalog-category-bikes__price-title') %&gt;% \n      html_text(trim = TRUE) %&gt;% \n      stringr::str_extract(\"[0-9.,]+\\\\,[0-9,]+|[0-9,]+\") %&gt;%   #\n      stringr::str_replace_all(\"[.,]\", \"\") %&gt;%  \n      as.numeric()\n    model_prices &lt;- rbind(model_prices, data.frame(model = model, price = price/100))\n  }\n  return(model_prices)\n}\n\n# URLs different bike categories\nurls &lt;- c(\n  'https://www.rosebikes.de/fahrr%C3%A4der/mtb',\n  'https://www.rosebikes.de/fahrr%C3%A4der/rennrad',\n  'https://www.rosebikes.de/fahrr%C3%A4der/gravel'\n)\n\n# Scrape bike data \nbike_data &lt;- map_dfr(urls, scrape_bikes, .id = 'category')\n\nbike_data &lt;- as_tibble(bike_data)\nprint(bike_data)\n\n#&gt; # A tibble: 17 × 3\n#&gt;    category model            price\n#&gt;    &lt;chr&gt;    &lt;chr&gt;            &lt;dbl&gt;\n#&gt;  1 1        COUNT SOLO         749\n#&gt;  2 1        PSYCHO PATH       1499\n#&gt;  3 1        THRILL HILL       2999\n#&gt;  4 1        ROOT MILLER PLUS  4999\n#&gt;  5 1        GROUND CONTROL    1999\n#&gt;  6 1        ROOT MILLER       2299\n#&gt;  7 1        BONERO            1499\n#&gt;  8 1        SOUL FIRE         1999\n#&gt;  9 1        THE BRUCE          899\n#&gt; 10 2        XLITE             2999\n#&gt; 11 2        REVEAL PLUS       3999\n#&gt; 12 2        PRO SL            1099\n#&gt; 13 2        REVEAL            2499\n#&gt; 14 3        BACKROAD AL       1999\n#&gt; 15 3        BACKROAD          2499\n#&gt; 16 3        BACKROAD LIMITED  4499\n#&gt; 17 3        BACKROAD PLUS     5199"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html#import",
    "href": "content/01_journal/02_data_acquisition.html#import",
    "title": "Data Acquisition",
    "section": "",
    "text": "library(tidyverse) \nlibrary(rvest)     \nlibrary(xopen)     \nlibrary(jsonlite)  \nlibrary(glue)      # concatenate strings\nlibrary(stringi)   # character string/text processing\nlibrary(httr)\n\n\nget_weather_data &lt;- function(location) {\n  # Construct URL for API request\n  url &lt;- glue(\"https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/{location}\",\n              \"?unitGroup=metric&key=RA4VC64DQX39GT95QYTHY545B&contentType=json\")\n  json_data &lt;- fromJSON(content(GET(url), \"text\"), flatten = TRUE)\n  daily_data &lt;- json_data$days\n  # Extract only datetime, tempmax, tempmin, and temp columns\n  extracted_data &lt;- daily_data[, c(\"datetime\", \"tempmax\", \"tempmin\", \"temp\")]\n  colnames(extracted_data) &lt;- c(\"Datum\", \"Max. Temperatur\", \"Min. Temperatur\", \"Temperatur\")\n  cat(paste0(\"Wetter \", location, \" die nächsten 15 Tage:\\n\\n\"))\n  print(as_tibble(extracted_data))\n}\n\n\nweather_data &lt;- get_weather_data(\"Hamburg\")\n\n#&gt; No encoding supplied: defaulting to UTF-8.\n\n\n#&gt; Wetter Hamburg die nächsten 15 Tage:\n#&gt; \n#&gt; # A tibble: 15 × 4\n#&gt;    Datum      `Max. Temperatur` `Min. Temperatur` Temperatur\n#&gt;    &lt;chr&gt;                  &lt;dbl&gt;             &lt;dbl&gt;      &lt;dbl&gt;\n#&gt;  1 2023-05-01              18.6               4.3       11.4\n#&gt;  2 2023-05-02              12.1               6.6        9.5\n#&gt;  3 2023-05-03              13                 4.4        8.9\n#&gt;  4 2023-05-04              14                 4.8        9.8\n#&gt;  5 2023-05-05               9.2               6.6        8.1\n#&gt;  6 2023-05-06              14.2               3.7        8.7\n#&gt;  7 2023-05-07              14.8               3.1        8.8\n#&gt;  8 2023-05-08              15.2               2.3        9  \n#&gt;  9 2023-05-09              15.2               2.1        9.2\n#&gt; 10 2023-05-10              14                 6.8        9.7\n#&gt; 11 2023-05-11              14.6               3.1        8.8\n#&gt; 12 2023-05-12              15.4               2.1        8.7\n#&gt; 13 2023-05-13              14.1               4.2        9.6\n#&gt; 14 2023-05-14              10.4               5.3        7.8\n#&gt; 15 2023-05-15              14.5               5.6        9.7\n\n\n\nscrape_bikes &lt;- function(url) {\n  page &lt;- read_html(url)\n  bikes &lt;- page %&gt;% html_nodes('.catalog-category-bikes__content')\n  model_prices &lt;- data.frame(model = character(), price = numeric())\n  for (bike in bikes) {\n    model &lt;- bike %&gt;% \n      html_node('.basic-headline__title') %&gt;% \n      html_text(trim = TRUE)\n    price &lt;- bike %&gt;% \n      html_node('.catalog-category-bikes__price-title') %&gt;% \n      html_text(trim = TRUE) %&gt;% \n      stringr::str_extract(\"[0-9.,]+\\\\,[0-9,]+|[0-9,]+\") %&gt;%   #\n      stringr::str_replace_all(\"[.,]\", \"\") %&gt;%  \n      as.numeric()\n    model_prices &lt;- rbind(model_prices, data.frame(model = model, price = price/100))\n  }\n  return(model_prices)\n}\n\n# URLs different bike categories\nurls &lt;- c(\n  'https://www.rosebikes.de/fahrr%C3%A4der/mtb',\n  'https://www.rosebikes.de/fahrr%C3%A4der/rennrad',\n  'https://www.rosebikes.de/fahrr%C3%A4der/gravel'\n)\n\n# Scrape bike data \nbike_data &lt;- map_dfr(urls, scrape_bikes, .id = 'category')\n\nbike_data &lt;- as_tibble(bike_data)\nprint(bike_data)\n\n#&gt; # A tibble: 17 × 3\n#&gt;    category model            price\n#&gt;    &lt;chr&gt;    &lt;chr&gt;            &lt;dbl&gt;\n#&gt;  1 1        COUNT SOLO         749\n#&gt;  2 1        PSYCHO PATH       1499\n#&gt;  3 1        THRILL HILL       2999\n#&gt;  4 1        ROOT MILLER PLUS  4999\n#&gt;  5 1        GROUND CONTROL    1999\n#&gt;  6 1        ROOT MILLER       2299\n#&gt;  7 1        BONERO            1499\n#&gt;  8 1        SOUL FIRE         1999\n#&gt;  9 1        THE BRUCE          899\n#&gt; 10 2        XLITE             2999\n#&gt; 11 2        REVEAL PLUS       3999\n#&gt; 12 2        PRO SL            1099\n#&gt; 13 2        REVEAL            2499\n#&gt; 14 3        BACKROAD AL       1999\n#&gt; 15 3        BACKROAD          2499\n#&gt; 16 3        BACKROAD LIMITED  4499\n#&gt; 17 3        BACKROAD PLUS     5199"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "library(dplyr)\nlibrary(data.table)\n\n#&gt; \n#&gt; Attache Paket: 'data.table'\n\n\n#&gt; Die folgenden Objekte sind maskiert von 'package:dplyr':\n#&gt; \n#&gt;     between, first, last\n\nlibrary(vroom)\ncol_types &lt;- list(\n  id = col_character(),\n  type = col_character(),\n  number = col_character(),\n  country = col_character(),\n  date = col_date(\"%Y-%m-%d\"),\n  abstract = col_character(),\n  title = col_character(),\n  kind = col_character(),\n  num_claims = col_double(),\n  filename = col_character(),\n  withdrawn = col_double()\n)\n\npatent_tbl &lt;- vroom(\n            file       = \"C:/Users/ehsan/Desktop/DataSciece/myds/ss23-bdsb-EhssRos/03_datawrang/Patent_data_reduced/patent.tsv\", \n            delim      = \"\\t\", \n            col_types  = col_types,\n            na         = c(\"\", \"NA\", \"NULL\")\n        )\n\n#&gt; Warning: The following named parsers don't match the column names: type,\n#&gt; number, country, abstract, title, kind, filename, withdrawn\n\nct &lt;- list(\n  id = col_character(),\n  organization = col_character(),\n  type = col_number()\n  \n)\nct2 &lt;- list(\n  patent_id = col_character(),\n  assignee_id = col_character()\n)\n\nassignee &lt;- vroom(\n  file       = \"C:/Users/ehsan/Desktop/DataSciece/myds/ss23-bdsb-EhssRos/03_datawrang/Patent_data_reduced/assignee.tsv\", \n  delim      = \"\\t\", \n  col_types  = ct,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\n\n\npatent_assignee &lt;- vroom(\n  file       = \"C:/Users/ehsan/Desktop/DataSciece/myds/ss23-bdsb-EhssRos/03_datawrang/Patent_data_reduced/patent_assignee.tsv\", \n  delim      = \"\\t\", \n  col_types  = ct2,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\nmerged_data &lt;- left_join(patent_assignee, assignee, by = c(\"assignee_id\" = \"id\"))\nsorted_data &lt;- merged_data %&gt;%\n  filter(type == 2) %&gt;% \n  group_by(organization) %&gt;%\n  summarise(pats = n()) %&gt;%\n  arrange(desc(pats)) \n\n\n#Question 1 answer:\n\nhead(sorted_data, 10)\n\n\n\n  \n\n\n\n\nassignee_patent &lt;- left_join(assignee, patent_assignee, by = c(\"id\" = \"assignee_id\"))\n\npatent_data &lt;- left_join(assignee_patent, patent_tbl, by = c( \"patent_id\"=\"id\"))\naugust_pat &lt;- patent_data %&gt;%\n  filter(month(date) == 8, year(date) == 2014)\npatent_counts &lt;- august_pat %&gt;%\n  group_by(organization) %&gt;%\n  summarize(num_patents = n()) %&gt;%\n  ungroup()\ntop_orgs &lt;- patent_counts %&gt;%\n  arrange(desc(num_patents)) %&gt;%\n  head(10)\ntop_orgs\n\n\n\n  \n\n\n\n\nct3 &lt;- list(\n  patent_id = col_character(),\n  mainclass_id = col_character(),\n  sequence = col_double()\n)\n\nuspc &lt;- vroom(\n  file       = \"C:/Users/ehsan/Desktop/DataSciece/myds/ss23-bdsb-EhssRos/03_datawrang/Patent_data_reduced/uspc.tsv\", \n  delim      = \"\\t\", \n  col_types  = ct3,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\n\npatent_assignee_uspc &lt;- assignee_patent %&gt;%\n  left_join(uspc)\n\n#&gt; Joining with `by = join_by(patent_id)`\n\n\n#&gt; Warning in left_join(., uspc): Detected an unexpected many-to-many relationship between `x` and `y`.\n#&gt; ℹ Row 1 of `x` matches multiple rows in `y`.\n#&gt; ℹ Row 376875 of `y` matches multiple rows in `x`.\n#&gt; ℹ If a many-to-many relationship is expected, set `relationship =\n#&gt;   \"many-to-many\"` to silence this warning.\n\npatents_top10 &lt;- patent_assignee_uspc %&gt;%\n  filter( !is.na(organization)) %&gt;%\n  group_by(organization) %&gt;%\n  summarise(count = n()) %&gt;%\n  ungroup() %&gt;%\n  arrange(desc(count)) %&gt;%  \n  head(n = 10)\npatents_top10\n\n\n\n  \n\n\n#business machines\ntop5 &lt;- patent_assignee_uspc %&gt;%\n  filter( organization %in% patents_top10$organization,  !is.na(mainclass_id)) %&gt;%\n  group_by(mainclass_id) %&gt;%\n  summarise(count_class = n()) %&gt;%\n  ungroup() %&gt;%\n  arrange(desc(count_class)) %&gt;%  \n  select(mainclass_id) %&gt;%\n  head(n = 5)\ntop5"
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "#install.packages(\"ggrepel\")\nlibrary(tidyverse)\nlibrary(data.table)\nlibrary(lubridate)\n\nlibrary(ggplot2)\nlibrary(ggrepel)\n\n# Load COVID-19 data from the web\nurl &lt;- \"https://covid.ourworldindata.org/data/owid-covid-data.csv\"\ncovid_data_tbl &lt;- fread(url)\nplot_date &lt;- today()\ncovid_data_clean &lt;- covid_data_tbl %&gt;%\n  mutate(year = year(date), month = month(date), day = day(date)) %&gt;%\n  mutate(location_cleaned = case_when(\n    location == \"United Kingdom\" ~ \"UK\",\n    location == \"United States\" ~ \"USA\",\n    location == \"Democratic Republic of Congo\" ~ \"Democratic Republic of the Congo\",\n    TRUE ~ location\n  )) %&gt;%\n  distinct() %&gt;%\n  select(location_cleaned, date, year, month, day, total_cases) %&gt;%\n  filter(location_cleaned %in% c(\"Europe\", \"Germany\", \"UK\", \"France\", \"Spain\", \"USA\"), as.Date(date) &lt;= plot_date)\ntop_locations &lt;- covid_data_clean %&gt;%\n  group_by(location_cleaned) %&gt;%\n  arrange(desc(total_cases)) %&gt;%\n  distinct(location_cleaned) %&gt;%\n  pull(location_cleaned)\nggplot(data = covid_data_clean, aes(x = date, y = total_cases, color = location_cleaned, fill = location_cleaned)) +\n  geom_line(size = 1) +\n  scale_x_date(labels = scales::label_date(format = \"%B '%y\"), date_breaks = \"1 month\") +\n  scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = \"M\")) +\n  labs(\n    title = str_glue(\"COVID-19 Cases Worldwide\"),\n    subtitle = str_glue(\"As of {format(plot_date, format='%d/%m/%Y')}\"),\n    x = \"Date\",\n    y = \"Cumulative Cases\",\n    color = \"Continent / Country\"\n  ) +\n  geom_label_repel(\n    aes(label = format(total_cases, big.mark = \".\", decimal.mark = \",\", scientific = FALSE)),\n    color = \"white\",\n    hjust = \"inward\",\n    nudge_x = -20,\n    min.segment.length = 0,\n    size = 3,\n    segment.color = \"black\",\n    inherit.aes = TRUE,\n    data = covid_data_clean %&gt;%\n      filter(date == plot_date - 1, location_cleaned %in% head(top_locations, 2)),\n    show.legend = FALSE\n  ) +\n  theme(\n    legend.position = \"bottom\",\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.title = element_text(size = 10),\n    plot.subtitle = element_text(size = 9),\n    legend.text = element_text(size = 7),\n    legend.title = element_text(size = 9),\n    legend.background = element_blank(),\n    line = element_line(color = \"grey\"),\n    panel.grid.major = element_line(color = \"grey\", size = 0.07),\n    axis.ticks = element_line(color = \"grey\"),\n    axis.line = element_line(color = \"grey\"),\n    axis.title.x = element_blank(),\n    panel.background = element_blank()\n  ) +\n  scale_color_brewer(palette = \"Accent\") +\n  scale_fill_brewer(palette = \"Accent\")\n\n#&gt; Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#&gt; ℹ Please use `linewidth` instead.\n\n\n#&gt; Warning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\n#&gt; ℹ Please use the `linewidth` argument instead.\n\n\n#&gt; Warning: Removed 98 rows containing missing values (`geom_line()`).\n\n\n#&gt; Warning: Removed 1 rows containing missing values (`geom_label_repel()`).\n\n\n\n\n\n\n\n\nchall 2\n\nurl &lt;- \"https://covid.ourworldindata.org/data/owid-covid-data.csv\"\ncovid_data_tbl &lt;- fread(url)\nworld &lt;- map_data(\"world\")\n\nplot_date &lt;- as.Date(\"2023-01-01\")  # Define the desired plot date\n\ncov_data &lt;- covid_data_tbl %&gt;%\n  mutate(year = year(date),\n         month = month(date),\n         day = day(date)) %&gt;%\n  mutate(location = case_when(\n    location == \"United Kingdom\" ~ \"UK\",\n    location == \"United States\" ~ \"USA\",\n    location == \"Democratic Republic of Congo\" ~ \"Democratic Republic of the Congo\",\n    TRUE ~ location\n  )) %&gt;%\n  distinct() %&gt;%\n  filter(as.Date(date) == plot_date - 1) %&gt;%\n  mutate(mortality = (total_deaths / population) * 100) %&gt;%\n  filter(!is.na(mortality)) %&gt;%\n  distinct() %&gt;%\n  select(location, total_cases, total_deaths, mortality, total_deaths_per_million, new_deaths, year, month, day, date)\n\ncov_data_world &lt;- world %&gt;%\n  left_join(cov_data, by = c(\"region\" = \"location\")) %&gt;%\n  select(long, lat, group, order, region, subregion, mortality) %&gt;%\n  arrange(order)\n\nlow_color &lt;- RColorBrewer::brewer.pal(n = 8, name = \"YlOrRd\")[1]\nhigh_color &lt;- RColorBrewer::brewer.pal(n = 8, name = \"YlOrRd\")[8]\n\ncov_data_world %&gt;%\n  ggplot() +\n  geom_map(aes(long, lat, map_id = region, fill = mortality),\n            map = cov_data_world,\n            color = \"grey\",\n            size = 0.09) +\n  scale_fill_gradient(low = low_color,\n                      high = high_color,\n                      na.value = \"grey\",\n                      labels = percent,\n                      breaks = c(0, 0.05, 0.1, 0.15, 0.2, 0.25)) +\n  labs(\n    title = \"Distribution of COVID-19 Mortality Rate by Country\",\n    subtitle = \"Mortality rate is expressed as deaths per population\",\n    fill = \"Mortality Rate\",\n    caption = str_glue(\"Date: {format(plot_date, format = '%m/%d/%Y')}\")\n  ) +\n  theme(plot.title = element_text(size = 10),\n        plot.subtitle = element_text(size = 9),\n        legend.text = element_text(size = 7),\n        legend.title = element_text(size = 9),\n        plot.caption = element_text(size = 7),\n        axis.text = element_blank(),\n        axis.title = element_blank(),\n        line = element_line(color = \"grey\"),\n        panel.grid.major = element_line(color = \"grey\", size = 0.1),\n        axis.ticks = element_blank(),\n        axis.line = element_blank(),\n        panel.background = element_blank())\n\n#&gt; Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#&gt; ℹ Please use `linewidth` instead.\n\n\n#&gt; Warning in geom_map(aes(long, lat, map_id = region, fill = mortality), map =\n#&gt; cov_data_world, : Ignoring unknown aesthetics: x and y\n\n\n#&gt; Warning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\n#&gt; ℹ Please use the `linewidth` argument instead."
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/03_other/06_links.html#r-and-r-studio",
    "href": "content/03_other/06_links.html#r-and-r-studio",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual ."
  },
  {
    "objectID": "content/03_other/06_links.html#additional-r-resources",
    "href": "content/03_other/06_links.html#additional-r-resources",
    "title": "Links",
    "section": "",
    "text": "Google is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  }
]